" my .vimrc   songyang
set term=tmux
set nu          "显示行号
set autoindent  "自动缩进

filetype on
filetype plugin on
filetype indent on

" Rebind <Leader> key
" 修改默认leader \ 为;
let mapleader = ";"

"" 高亮显示当前行/列
set cursorline
"set cursorcolumn

"自动识别编码
set fileencodings=utf-8,gb2312,ucs-bom,euc-cn,euc-tw,gb18030,gbk,cp936

" use spaces not tabs
" Real programmers don't use TABs but spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" use tabs not spaces
"set ts=4        "tabstop 修改tab==4空格长度
"set sw=4    "shiftwidth,自动缩进插入的空格数
"set sts=4   "softabstop,使用<Tab>或<BS>自动插入或删除相应的空格数

"将行尾的空白字符高亮显示
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
"将行尾的空白字符高亮显示

"显示tab为→,末尾的空白为.
set list listchars=tab:→\ ,trail:·


" easier moving between tabs
" <Leader> 默认是\
" \n \m切换tab,就像gt gT
map <Leader>j <esc>:tabprevious<CR>
map <Leader>l <esc>:tabnext<CR>

"已打开的文件buf
map <Leader>bp <esc>:bprev<CR>
map <Leader>bn <esc>:bnext<CR>

"快速插入python2.7 及 编码
noremap <Leader>py27 <esc>ggI#!/bin/env python2.7<CR>#! -*- coding: UTF-8 -*-<CR><ESC>

"删除开头部分的空白
map 111 :s/^\s\+//<CR>

"删除结尾部分的空白
map 222 :s/\s\+$//<CR>

"map sort function to a key
"在virtual模式下 输入\sort对选中的排序
vnoremap <Leader>sort :sort<CR>

"bind Ctrl+<Movement> keys to move around the widows
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h


"Quick quit command
" Write and Quit current window
noremap <Leader>wq :wq<CR>

"Write current window
noremap <Leader>ww :w<CR>

"Fource quit current window
noremap <Leader>qqq :q!<CR>


"easier moving of code blocks
"virtual 模式下选中 按<或>移动选中代码块
"better indentation
vnoremap < <gv

"better indentation
vnoremap > >gv


" showing line numbers and length
set tw=99 " width of document (used by gd)
set nowrap " don't automatically wrap on load
set fo-=t  "don't automatically wrap text when typing
set colorcolumn=100
highlight colorcolumn ctermbg=green


" easier formatting of paragraphs
" 文本格式化
vmap Q gq
nmap Q gqap

"例如在下面所在行按Q，即可格式化，每行宽度为colorcolumn
"*ajdlfj *djfljf djfkl ddddddddddddddddddddddddddddajsdlkfj"dlskaj"sldjf"asdkfdlkjfffffffffklasdjfl Qaaaaaaaaaaa *ajdlfj"*djfljf"djfkl"ddddddddddddddddddddddddddddajsdlkfj  dlskajf"sldjf"asdkfdlkjfffffffffklasdjfl Qaaaaaaaaaaa

""vim plugin
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
" vundle主要就是上面这个四个命令，例如BundleInstall是全部重新安装，BundleInstall!则是更新
" 一般安装插件的流程为，先BundleSearch一个插件，然后在列表中选中，按i安装
" 安装完之后，在vimrc中，添加Bundle 'XXX'，使得bundle能够加载，这个插件，同时如果
" 需要配置这个插件，也是在vimrc中设置即可
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..
"
""""vundle"""""""""""""
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" github上的用户写的插件，使用这种用户名+repo名称的方式
" Bundle 'tpope/vim-fugitive'
" vimscripts的repo使用下面的格式，直接是插件名称
" c-support
Bundle 'c.vim'

":Matrix
Bundle 'matrix.vim--Yang'


"https://github.com/mattn/emmet-vim
" html 快速补全
Bundle 'mattn/emmet-vim'

"buffexplorer
" bufexplorer插件可以打开历史文件列表以达到快速切换文件的目的
Bundle 'bufexplorer.zip'
map <Leader>buf :BufExplorer<CR>

" 设置NerdTree
Bundle 'The-NERD-tree'
map <F3> :NERDTreeToggle<CR>

" NerdTree 使用
"o 打开关闭文件或者目录
"t 在标签页中打开
"T 在后台标签页中打开
"! 执行此文件
"p 到上层目录
"P 到根目录
"K 到第一个节点
"J 到最后一个节点
"u 打开上层目录
"m 显示文件系统菜单（添加、删除、移动操作）
"? 帮助
"q 关闭
" 设置NerdTree

""设置 taglist
Bundle 'taglist.vim'
let Tlist_Show_One_File=1    "只显示当前文件的tags
let Tlist_Exit_OnlyWindow=1  "tagList窗口是最后一个窗口，则退出Vim
let Tlist_Use_Right_Window=1 "在Vim窗口右侧显示taglist窗口
"设置ctags路径
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
"启动vim后自动打开taglist窗口
"let Tlist_Auto_Open = 1
""设置taglist窗口大小
let Tlist_WinHeight = 100
let Tlist_WinWidth = 40
""设置taglist打开关闭的快捷键F4
map <Leader>tag :TlistToggle<CR>
noremap <F5> :TlistToggle<CR>
"更新ctags标签文件快捷键设置
noremap <F6> :!ctags ./*.sh<CR>
"
"taglist窗口中可使用的快捷键：
" <CR>          跳到光标下tag所定义的位置，用鼠标双击此tag功能也一样（但要在vimrc文件中打开此项功能）
" o                 在一个新打开的窗口中显示光标下tag
" <Space>      显示光标下tag的原型定义
" u             更新taglist窗口中的tag
" s             更改排序方式，在按名字排序和按出现顺序排序间切换
" x             taglist窗口放大和缩小，方便查看较长的tag
" +             打开一个折叠，同zo
" -             将tag折叠起来，同zc
" *             打开所有的折叠，同zR
" =            将所有tag折叠起来，同zM
" [[            跳到前一个文件
" ]]            跳到后一个文件
" q            关闭taglist窗口
" <F1>      显示帮助
"
"自动生成tags
set autochdir
set tags=tags
"实现vim对tags的自动递归查找其实很简单, 因为vim已经实现了这个功能
"只是默认没有开启. 在vimrc添加下面两行配置, 就会是见证奇迹的时刻:
"　　set autochdir
"　　set tags=tags;
"　　set autochdir表示自动切换目录的意思, set tags=tags;表示自动查找,
"这两句同时设置vim即可实现递归的tags查找, 注意: set tags=tags;这一句的最后有一个分号, 这个分号是不能省略的.
"vim的配置文件使用的是vim自己的脚步语言. 这里是少数几个在行尾需要使用分号的地方之一.
"
""设置 taglist
"

"bling/vim-airline
"https://github.com/bling/vim-airline
Bundle 'bling/vim-airline'
let g:airline_powerline_fonts = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
"let g:airline_theme="solarized"
let g:airline_theme="term"
set laststatus=2


"在vim运行shell,python
Bundle 'oplatek/Conque-Shell'
"快捷键	功能
"<F9>	将选中的文本，发送到Conque-Shell的交互程序中
"<F10>	将当前文件所有文本，发送到Conque-Shell的交互程序中
"<F11>	如果当前编辑文件可执行，则打开新的Conque-Shell并运行


"ctrlp
Bundle 'kien/ctrlp.vim'
" git clone https://github.com/kien/ctrlp.vim.git
let g:ctrlp_max_height = 30
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*/coverage/*
set wildignore+=*/blog_venv/*
set wildignore+=*/venv/*


"""" Settings for jedi-vim
"""Bundle 'davidhalter/jedi-vim'
"""" cd ~/.vim/bundle
"""" git clone git://github.com/davidhalter/jedi-vim.git
"""" https://github.com/davidhalter/jedi-vim
"""let g:jedi#popup_on_dot = 0
"""let g:jedi#popup_select_first = 0
"""map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>
"""let g:jedi#goto_command = "<leader>d"
"""let g:jedi#goto_assignments_command = "<leader>g"
"""let g:jedi#goto_definitions_command = "<leader>d"
"""let g:jedi#documentation_command = "K"
"""let g:jedi#usages_command = "<leader>u"
"""let g:jedi#completions_command = "<C-M>"
"""let g:jedi#rename_command = "<leader>r"
"""
""""if you don't want completion, but all the other features, use:
"""let g:jedi#completions_enabled = 0

"disable  the docstring window to popup during completion
"autocmd FileType python setlocal completeopt-=preview
"Apart from that, jedi-vim supports the following commands：
"
"Completion <C-Space>
"Goto assignments <leader>g (typical goto function)
"Goto definitions <leader>d (follow identifier as far as possible, includes imports and statements)
"Show Documentation/Pydoc K (shows a popup with assignments)
"Renaming <leader>r
"Usages <leader>n (shows all the usages of a name)
"Open module, e.g. :Pyimport os (opens the os module)
"

"""Valloric/YouCompleteMe
"""https://github.com/Valloric/YouCompleteMe#installation
Bundle 'Valloric/YouCompleteMe'
"""     1   yum install automake gcc gcc-c++ kernel-devel cmake python-devel
"""     2   yum install automake gcc gcc-c++ kernel-devel cmake python-devel
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gc :YcmCompleter Declaration<CR>
nnoremap <leader>doc :YcmCompleter GetDoc<CR>

let g:ycm_add_preview_to_completeopt=1
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_key_invoke_completion = '<leader>;'
""语法关键字补全
let g:ycm_seed_identifiers_with_syntax=1

"set completeopt=longest,menu    "让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
"回车即选中当前项
inoremap <expr> <CR> pumvisible() ? '<C-y>' : '<CR>'
